#import <Foundation/Foundation.h>
#import "SWGCrimeRiskResponse.h"
#import "SWGEarthquakeRiskResponse.h"
#import "SWGFireRiskResponse.h"
#import "SWGFireStations.h"
#import "SWGFloodRiskResponse.h"
#import "SWGApi.h"

/**
* Location Intelligence APIs
* Incorporate our extensive geodata into everyday applications, business processes and workflows.
*
* OpenAPI spec version: 3.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface SWGLIAPIGeoRiskServiceApi: NSObject <SWGApi>

extern NSString* kSWGLIAPIGeoRiskServiceApiErrorDomain;
extern NSInteger kSWGLIAPIGeoRiskServiceApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Gets CrimeRiskResponse
/// Returns the crime data or crime indexes for a given address input.
///
/// @param address Free-form address text.
/// @param type Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)
/// 
///  code:200 message:"successful operation"
///
/// @return SWGCrimeRiskResponse*
-(NSNumber*) getCrimeRiskByAddressWithAddress: (NSString*) address
    type: (NSString*) type
    completionHandler: (void (^)(SWGCrimeRiskResponse* output, NSError* error)) handler;


/// Gets CrimeRiskResponse
/// Returns the crime data or crime indexes for a given location.
///
/// @param longitude The longitude of the location
/// @param latitude The latitude of the location
/// @param type Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)
/// 
///  code:200 message:"successful operation"
///
/// @return SWGCrimeRiskResponse*
-(NSNumber*) getCrimeRiskByLocationWithLongitude: (NSString*) longitude
    latitude: (NSString*) latitude
    type: (NSString*) type
    completionHandler: (void (^)(SWGCrimeRiskResponse* output, NSError* error)) handler;


/// Gets EarthquakeRiskResponse
/// Returns the count of earthquake events for various richter measurements and values for an input address.
///
/// @param address Free-form address text
/// @param richterValue Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)
/// 
///  code:200 message:"successful operation"
///
/// @return SWGEarthquakeRiskResponse*
-(NSNumber*) getEarthquakeRiskByAddressWithAddress: (NSString*) address
    richterValue: (NSString*) richterValue
    completionHandler: (void (^)(SWGEarthquakeRiskResponse* output, NSError* error)) handler;


/// Gets EarthquakeRiskResponse
/// Gets EarthquakeRiskResponse
///
/// @param longitude The longitude of the location
/// @param latitude The latitude of the location
/// @param richterValue Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)
/// 
///  code:200 message:"successful operation"
///
/// @return SWGEarthquakeRiskResponse*
-(NSNumber*) getEarthquakeRiskByLocationWithLongitude: (NSString*) longitude
    latitude: (NSString*) latitude
    richterValue: (NSString*) richterValue
    completionHandler: (void (^)(SWGEarthquakeRiskResponse* output, NSError* error)) handler;


/// Gets FireRiskResponse
/// Returns the fire data based on address input.
///
/// @param address Free-form address text
/// 
///  code:200 message:"successful operation"
///
/// @return SWGFireRiskResponse*
-(NSNumber*) getFireRiskByAddressWithAddress: (NSString*) address
    completionHandler: (void (^)(SWGFireRiskResponse* output, NSError* error)) handler;


/// Gets FireRiskResponse
/// Returns the fire data based on location input.
///
/// @param longitude Longitude of Location
/// @param latitude Latitude of Location
/// 
///  code:200 message:"successful operation"
///
/// @return SWGFireRiskResponse*
-(NSNumber*) getFireRiskByLocationWithLongitude: (NSString*) longitude
    latitude: (NSString*) latitude
    completionHandler: (void (^)(SWGFireRiskResponse* output, NSError* error)) handler;


/// Gets FireStationResponse
/// Returns the nearest Firestations from an input address.
///
/// @param address The address to be searched.
/// @param maxCandidates Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)
/// @param travelTime Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)
/// @param travelTimeUnit Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)
/// @param travelDistance Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)
/// @param travelDistanceUnit Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)
/// @param sortBy Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)
/// 
///  code:200 message:"successful operation"
///
/// @return SWGFireStations*
-(NSNumber*) getFireStationByAddressWithAddress: (NSString*) address
    maxCandidates: (NSString*) maxCandidates
    travelTime: (NSString*) travelTime
    travelTimeUnit: (NSString*) travelTimeUnit
    travelDistance: (NSString*) travelDistance
    travelDistanceUnit: (NSString*) travelDistanceUnit
    sortBy: (NSString*) sortBy
    completionHandler: (void (^)(SWGFireStations* output, NSError* error)) handler;


/// Gets FireStationResponse
/// Returns the nearest Firestations from an input location.
///
/// @param longitude Longitude of Location
/// @param latitude Latitude of Location
/// @param maxCandidates Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)
/// @param travelTime Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)
/// @param travelTimeUnit Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)
/// @param travelDistance Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)
/// @param travelDistanceUnit Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)
/// @param sortBy Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)
/// 
///  code:200 message:"successful operation"
///
/// @return SWGFireStations*
-(NSNumber*) getFireStationByLocationWithLongitude: (NSString*) longitude
    latitude: (NSString*) latitude
    maxCandidates: (NSString*) maxCandidates
    travelTime: (NSString*) travelTime
    travelTimeUnit: (NSString*) travelTimeUnit
    travelDistance: (NSString*) travelDistance
    travelDistanceUnit: (NSString*) travelDistanceUnit
    sortBy: (NSString*) sortBy
    completionHandler: (void (^)(SWGFireStations* output, NSError* error)) handler;


/// Gets FloodRiskResponse
/// Returns the Flood Risk data for flood zones based on an address.
///
/// @param address Free-text Address
/// @param includeZoneDesc Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)
/// 
///  code:200 message:"successful operation"
///
/// @return SWGFloodRiskResponse*
-(NSNumber*) getFloodRiskByAddressWithAddress: (NSString*) address
    includeZoneDesc: (NSString*) includeZoneDesc
    completionHandler: (void (^)(SWGFloodRiskResponse* output, NSError* error)) handler;


/// Gets FloodRiskResponse
/// Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
///
/// @param longitude Longitude of Location
/// @param latitude Latitude of Location
/// @param includeZoneDesc Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)
/// 
///  code:200 message:"successful operation"
///
/// @return SWGFloodRiskResponse*
-(NSNumber*) getFloodRiskByLocationWithLongitude: (NSString*) longitude
    latitude: (NSString*) latitude
    includeZoneDesc: (NSString*) includeZoneDesc
    completionHandler: (void (^)(SWGFloodRiskResponse* output, NSError* error)) handler;



@end
