#import <Foundation/Foundation.h>
#import "PBIntersectionResponse.h"
#import "PBApi.h"

/**
* Location Intelligence APIs
* Incorporate our extensive geodata into everyday applications, business processes and workflows.
*
* OpenAPI spec version: 8.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface PBLIAPIGeoStreetsServiceApi: NSObject <PBApi>

extern NSString* kPBLIAPIGeoStreetsServiceApiErrorDomain;
extern NSInteger kPBLIAPIGeoStreetsServiceApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Gets NearestIntersection of major roads
/// Gets NearestIntersection of major roads
///
/// @param address Address
/// @param roadClass Filters roads with specified class, allowed values are (Major, Motorways, Other and All), default is All (optional)
/// @param driveTime Returns Intersection in specified drive time (optional)
/// @param driveTimeUnit Drive time unit, allowed values are (hours, minutes, seconds and milliseconds), default is minutes (optional)
/// @param searchRadius Search radius within which user wants to search, default is 50 miles (optional)
/// @param searchRadiusUnit Search radius unit, allowed values are (feet, meter, kilometers and miles) (optional)
/// @param historicSpeed Traffic flow in peak time, allowed values are (AMPEAK,PMPEAK,OFFPEAK,NIGHT) (optional)
/// @param maxCandidates max candidates to be returned default is 1 (optional)
/// 
///  code:200 message:"successful operation"
///
/// @return PBIntersectionResponse*
-(NSNumber*) getIntersectionByAddressWithAddress: (NSString*) address
    roadClass: (NSString*) roadClass
    driveTime: (NSString*) driveTime
    driveTimeUnit: (NSString*) driveTimeUnit
    searchRadius: (NSString*) searchRadius
    searchRadiusUnit: (NSString*) searchRadiusUnit
    historicSpeed: (NSString*) historicSpeed
    maxCandidates: (NSString*) maxCandidates
    completionHandler: (void (^)(PBIntersectionResponse* output, NSError* error)) handler;


/// Gets NearestIntersection of major roads
/// Gets NearestIntersection of major roads
///
/// @param longitude Longitude of the location.
/// @param latitude Latitude of the location.
/// @param roadClass Filters roads with specified class, allowed values are (Major, Motorways, Other and All), default is All (optional)
/// @param driveTime Returns Intersection in specified drive time (optional)
/// @param driveTimeUnit Drive time unit, allowed values are (hours, minutes, seconds and milliseconds), default is minutes (optional)
/// @param searchRadius Search radius within which user wants to search, default is 50 miles (optional)
/// @param searchRadiusUnit Search radius unit, allowed values are (feet, meter, kilometers and miles) (optional)
/// @param historicSpeed Traffic flow in peak time, allowed values are (AMPEAK,PMPEAK,OFFPEAK,NIGHT) (optional)
/// @param maxCandidates max candidates to be returned default is 1 (optional)
/// 
///  code:200 message:"successful operation"
///
/// @return PBIntersectionResponse*
-(NSNumber*) getIntersectionByLocationWithLongitude: (NSString*) longitude
    latitude: (NSString*) latitude
    roadClass: (NSString*) roadClass
    driveTime: (NSString*) driveTime
    driveTimeUnit: (NSString*) driveTimeUnit
    searchRadius: (NSString*) searchRadius
    searchRadiusUnit: (NSString*) searchRadiusUnit
    historicSpeed: (NSString*) historicSpeed
    maxCandidates: (NSString*) maxCandidates
    completionHandler: (void (^)(PBIntersectionResponse* output, NSError* error)) handler;



@end
